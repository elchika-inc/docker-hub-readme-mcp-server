import { describe, it, expect, beforeEach, vi } from 'vitest';
import { ReadmeParser } from '../../src/services/readme-parser.js';

// Mock the logger module
vi.mock('../../src/utils/logger.js', () => ({
  logger: {
    debug: vi.fn(),
    info: vi.fn(),
    warn: vi.fn(),
    error: vi.fn(),
  },
}));

describe('ReadmeParser', () => {
  let parser: ReadmeParser;

  beforeEach(() => {
    parser = new ReadmeParser();
    vi.clearAllMocks();
  });

  describe('parseUsageExamples', () => {
    it('should return empty array when includeExamples is false', () => {
      const readme = '# Test\n```bash\ndocker run nginx\n```';
      const result = parser.parseUsageExamples(readme, false);
      expect(result).toEqual([]);
    });

    it('should return empty array for empty content', () => {
      const result = parser.parseUsageExamples('', true);
      expect(result).toEqual([]);
    });

    it('should extract usage examples from usage section', () => {
      const readme = `
# My Container

Some description here.

## Usage

You can run this container with:

\`\`\`bash
docker run -p 8080:80 nginx
\`\`\`

For production use:

\`\`\`bash
docker run -d --name webserver nginx
\`\`\`
`;

      const result = parser.parseUsageExamples(readme, true);
      
      expect(result).toHaveLength(2);
      expect(result[0]).toMatchObject({
        title: 'Run Container',
        code: 'docker run -p 8080:80 nginx',
        language: 'bash',
      });
      expect(result[1]).toMatchObject({
        title: 'Run Container',
        code: 'docker run -d --name webserver nginx',
        language: 'bash',
      });
    });

    it('should extract examples from different language blocks', () => {
      const readme = `
# Usage

## Docker

\`\`\`bash
docker pull myimage
\`\`\`

## Docker Compose

\`\`\`yaml
version: '3'
services:
  app:
    image: myimage
\`\`\`

## Dockerfile

\`\`\`dockerfile
FROM myimage
EXPOSE 80
\`\`\`
`;

      const result = parser.parseUsageExamples(readme, true);
      
      expect(result).toHaveLength(3);
      expect(result[0].language).toBe('bash');
      expect(result[1].language).toBe('yaml');
      expect(result[2].language).toBe('dockerfile');
    });

    it('should deduplicate identical examples', () => {
      const readme = `
# Usage

First example:
\`\`\`bash
docker run nginx
\`\`\`

Same example again:
\`\`\`bash
docker run nginx
\`\`\`
`;

      const result = parser.parseUsageExamples(readme, true);
      
      expect(result).toHaveLength(1);
    });

    it('should limit examples to 10', () => {
      let readme = '# Usage\n\n';
      for (let i = 0; i < 15; i++) {
        readme += `\`\`\`bash\ndocker run example${i}\n\`\`\`\n\n`;
      }

      const result = parser.parseUsageExamples(readme, true);
      
      expect(result).toHaveLength(10);
    });

    it('should extract descriptions for examples', () => {
      const readme = `
# Usage

Pull the image first:
\`\`\`bash
docker pull nginx
\`\`\`

Run in background mode:
\`\`\`bash
docker run -d nginx
\`\`\`
`;

      const result = parser.parseUsageExamples(readme, true);
      
      expect(result[0].description).toBe('Pull the image first:');
      expect(result[1].description).toBe('Run in background mode:');
    });
  });

  describe('generateExampleTitle', () => {
    it('should generate appropriate titles for Docker commands', () => {
      const testCases = [
        { code: 'docker pull nginx', language: 'bash', expected: 'Pull Image' },
        { code: 'docker run nginx', language: 'bash', expected: 'Run Container' },
        { code: 'docker build .', language: 'bash', expected: 'Build Image' },
        { code: 'ls -la', language: 'bash', expected: 'Command Line Usage' },
      ];

      testCases.forEach(({ code, language, expected }) => {
        const result = (parser as any).generateExampleTitle(code, language);
        expect(result).toBe(expected);
      });
    });

    it('should generate titles for different languages', () => {
      const testCases = [
        { code: 'FROM node:16', language: 'dockerfile', expected: 'Dockerfile Example' },
        { code: 'version: "3"', language: 'yaml', expected: 'Docker Compose' },
        { code: '{"name": "test"}', language: 'json', expected: 'Configuration' },
        { code: 'console.log("test")', language: 'javascript', expected: 'JavaScript Integration' },
        { code: 'print("test")', language: 'python', expected: 'Python Integration' },
        { code: 'test code', language: 'text', expected: 'Code Example' },
      ];

      testCases.forEach(({ code, language, expected }) => {
        const result = (parser as any).generateExampleTitle(code, language);
        expect(result).toBe(expected);
      });
    });
  });

  describe('normalizeLanguage', () => {
    it('should normalize language names', () => {
      const testCases = [
        { input: 'sh', expected: 'bash' },
        { input: 'shell', expected: 'bash' },
        { input: 'yml', expected: 'yaml' },
        { input: 'md', expected: 'markdown' },
        { input: 'py', expected: 'python' },
        { input: 'js', expected: 'javascript' },
        { input: 'ts', expected: 'typescript' },
        { input: 'unknown', expected: 'unknown' },
      ];

      testCases.forEach(({ input, expected }) => {
        const result = (parser as any).normalizeLanguage(input);
        expect(result).toBe(expected);
      });
    });
  });

  describe('cleanMarkdown', () => {
    it('should remove badges and keep alt text', () => {
      const input = 'Check out ![Build Status](https://example.com/badge.svg) and ![](https://example.com/empty.svg)';
      const result = parser.cleanMarkdown(input);
      expect(result).toContain('Build Status');
      expect(result).not.toContain('https://example.com/badge.svg');
    });

    it('should convert relative links to text', () => {
      const input = 'See [documentation](./docs/README.md) for more info';
      const result = parser.cleanMarkdown(input);
      expect(result).toContain('documentation');
      expect(result).not.toContain('./docs/README.md');
    });

    it('should preserve absolute links', () => {
      const input = 'Visit [GitHub](https://github.com/owner/repo)';
      const result = parser.cleanMarkdown(input);
      expect(result).toContain('[GitHub](https://github.com/owner/repo)');
    });

    it('should clean up excessive whitespace', () => {
      const input = 'Line 1\n\n\n\nLine 2\n\n\n\nLine 3';
      const result = parser.cleanMarkdown(input);
      expect(result).toBe('Line 1\n\nLine 2\n\nLine 3');
    });

    it('should handle errors gracefully', () => {
      const input = 'Valid content';
      
      // Mock JSON.stringify to throw error
      const originalStringify = JSON.stringify;
      JSON.stringify = vi.fn().mockImplementationOnce(() => {
        throw new Error('Test error');
      });

      const result = parser.cleanMarkdown(input);
      expect(result).toBe(input);

      // Restore original function
      JSON.stringify = originalStringify;
    });
  });

  describe('extractDescription', () => {
    it('should extract first substantial paragraph', () => {
      const readme = `
# My Container

This is a comprehensive container for running web applications with advanced features.

## Installation

Follow these steps...
`;

      const result = parser.extractDescription(readme);
      expect(result).toBe('This is a comprehensive container for running web applications with advanced features.');
    });

    it('should skip badges and headers', () => {
      const readme = `
# Title

![Badge](https://example.com/badge.svg)
[![Build](https://example.com/build.svg)](https://example.com/build)

This is the actual description of the project.

## Next Section
`;

      const result = parser.extractDescription(readme);
      expect(result).toBe('This is the actual description of the project.');
    });

    it('should combine continuation lines', () => {
      const readme = `
# Title

This is the first line of description.
This continues the description and provides more details.

## Next Section
`;

      const result = parser.extractDescription(readme);
      expect(result).toBe('This is the first line of description. This continues the description and provides more details.');
    });

    it('should limit description length', () => {
      const readme = `
# Title

${'This is a very long description that exceeds the maximum length limit. '.repeat(20)}

## Next Section
`;

      const result = parser.extractDescription(readme);
      expect(result.length).toBeLessThan(400);
    });

    it('should return default message for empty content', () => {
      const result = parser.extractDescription('');
      expect(result).toBe('No description available');
    });

    it('should return default message when no description found', () => {
      const readme = `
# Title

![Badge](https://example.com/badge.svg)

## Installation
`;

      const result = parser.extractDescription(readme);
      expect(result).toBe('No description available');
    });

    it('should handle errors gracefully', () => {
      const readme = 'Valid content with good description.';
      
      // Mock split method to throw error
      const originalSplit = String.prototype.split;
      String.prototype.split = vi.fn().mockImplementationOnce(() => {
        throw new Error('Test error');
      });

      const result = parser.extractDescription(readme);
      expect(result).toBe('No description available');

      // Restore original method
      String.prototype.split = originalSplit;
    });
  });

  describe('looksLikeCode', () => {
    it('should identify code-like text', () => {
      const codeTexts = [
        '{ "key": "value" }',
        'docker run nginx',
        'FROM ubuntu:20.04',
        '$ npm install',
        '// This is a comment',
        '# This is a shell comment',
        'function test() {',
        'if (condition);',
      ];

      codeTexts.forEach(text => {
        const result = (parser as any).looksLikeCode(text);
        expect(result).toBe(true);
      });
    });

    it('should not identify regular text as code', () => {
      const regularTexts = [
        'This is a normal sentence.',
        'Install the application using the following command.',
        'The container provides a web server.',
        'For more information, see the documentation.',
      ];

      regularTexts.forEach(text => {
        const result = (parser as any).looksLikeCode(text);
        expect(result).toBe(false);
      });
    });
  });
});